import { createSlice } from "@reduxjs/toolkit";
import { MainState } from "./types";
import * as reducers from "./reducers";
import { LngLat } from "mapbox-gl";
import { TSP } from "@/solvers";
import nearestNeighbor from "@/solvers/heuristic-construction/nearestNeighbor";

const firstExampleNodes = [
  new LngLat(-73.85835427500902, 40.56507951957753),
  new LngLat(-77.54976052500858, 38.772432514145194),
  new LngLat(-78.91206521250587, 42.66742768420476),
  new LngLat(-70.95796365000933, 42.66742768420476),
  new LngLat(-80.27436990000314, 26.176558881220437),
  new LngLat(-84.4052292750001, 34.108547937473524),
  new LngLat(-82.55952615000031, 28.24770207922181),
  new LngLat(-84.66890115000008, 30.089457425014395),
  new LngLat(-89.89839333750201, 29.746655988569763),
  new LngLat(-96.62202615000125, 32.640688397241334),
  new LngLat(-95.3036667750014, 29.287759374472813),
  new LngLat(-97.76460427500368, 30.089457425014395),
  new LngLat(-101.89546365000065, 34.97727964358472),
  new LngLat(-112.22261208749687, 33.23080293029681),
  new LngLat(-111.38765114999953, 35.01327961148759),
  new LngLat(-115.56245583750162, 36.08588188690158),
  new LngLat(-118.63862771249869, 33.999320468363095),
  new LngLat(-117.2323777124963, 32.97311239658548),
  new LngLat(-123.12104958749816, 38.222145234071036),
  new LngLat(-124.26362771250061, 41.13019627380825),
  new LngLat(-120.13276833749595, 39.72528830651809),
  new LngLat(-111.82710427499693, 41.13019627380825),
  new LngLat(-105.2353073999977, 39.961475963760066),
  new LngLat(-87.43745583749975, 41.69048709677229),
  new LngLat(-93.1064011499991, 45.29144400095841),
  new LngLat(-90.20601052499944, 38.772432514145194),
  new LngLat(-117.27632302500142, 47.50341272285311),
  new LngLat(-122.72554177499823, 45.8757982618686),
  new LngLat(-122.81343240000076, 48.152468818056875),
];

const nodes = [
  new LngLat(-112.073844, 33.448457),
  new LngLat(-116.237651, 43.613739),
  new LngLat(-92.189283, 38.572954),
  new LngLat(-86.784, 36.165),
  new LngLat(-86.147685, 39.790942),
  new LngLat(-71.549127, 43.220093),
  new LngLat(-86.279118, 32.361538),
  new LngLat(-92.331122, 34.736009),
  new LngLat(-121.468926, 38.555605),
  new LngLat(-104.984167, 39.7391667),
  new LngLat(-72.677, 41.767),
  new LngLat(-75.526755, 39.161921),
  new LngLat(-84.27277, 30.4518),
  new LngLat(-84.39, 33.76),
  new LngLat(-89.650373, 39.78325),
  new LngLat(-93.620866, 41.590939),
  new LngLat(-95.69, 39.04),
  new LngLat(-84.86311, 38.197274),
  new LngLat(-91.140229, 30.45809),
  new LngLat(-69.765261, 44.323535),
  new LngLat(-76.501157, 38.972945),
  new LngLat(-71.0275, 42.2352),
  new LngLat(-84.5467, 42.7335),
  new LngLat(-93.094, 44.95),
  new LngLat(-90.207, 32.32),
  new LngLat(-112.027031, 46.595805),
  new LngLat(-96.675345, 40.809868),
  new LngLat(-119.753877, 39.160949),
  new LngLat(-74.756138, 40.221741),
  new LngLat(-105.964575, 35.667231),
  new LngLat(-73.781339, 42.659829),
  new LngLat(-78.638, 35.771),
  new LngLat(-100.779004, 48.813343),
  new LngLat(-83.000647, 39.962245),
  new LngLat(-97.534994, 35.482309),
  new LngLat(-123.029159, 44.931109),
  new LngLat(-76.875613, 40.269789),
  new LngLat(-71.422132, 41.82355),
  new LngLat(-81.035, 34),
  new LngLat(-100.336378, 44.367966),
  new LngLat(-97.75, 30.266667),
  new LngLat(-111.892622, 40.7547),
  new LngLat(-72.57194, 44.26639),
  new LngLat(-77.46, 37.54),
  new LngLat(-122.893077, 47.042418),
  new LngLat(-81.633294, 38.349497),
  new LngLat(-89.384444, 43.074722),
  new LngLat(-104.802042, 41.145548),
];

export const initialState: MainState = {
  playing: false,
  definingPoints: false,
  nodes: firstExampleNodes,
  edges: nearestNeighbor(firstExampleNodes),
  delay: 0,
  algorithm: TSP.NEAREST_NEIGHBOR,
  timeStamp: 0,
  accumulator: [],
  distance: 0,
  bestDistance: 0,
};

export const mainSlice = createSlice({
  name: "main",
  initialState,
  reducers: {
    togglePlay: reducers.togglePlay,
    reset: reducers.reset,
    toggleDefiningPoints: reducers.toggleDefiningPoints,
    addNode: reducers.addNode,
    setAccumulator: reducers.setAccumulator,
    setEdges: reducers.setEdges,
    resetNodes: reducers.resetNodes,
    resetProgress: reducers.resetProgress,
    setDelay: reducers.setDelay,
    setAlgorithm: reducers.setAlgorithm,
    setTimeStamp: reducers.setTimeStamp,
    setDistance: reducers.setDistance,
  },
});

export const {
  togglePlay,
  reset,
  toggleDefiningPoints,
  addNode,
  setAccumulator,
  setEdges,
  resetNodes,
  resetProgress,
  setDelay,
  setAlgorithm,
  setTimeStamp,
  setDistance,
} = mainSlice.actions;

export default mainSlice.reducer;
